// @codekit-append "_utility.js"
// @codekit-append "_ui/_ui.js"
// @codekit-append "_init.js"

/*------------------------------------------------------------------
    MAIN
-------------------------------------------------------------------*/

/* **********************************************
     Begin _utility.js
********************************************** */

/*------------------------------------------------------------------
	Debouncing function from John Hann
	http://unscriptable.com/index.php/2009/03/20/debouncing-javascript-methods/
-------------------------------------------------------------------*/

(function($,sr){


	var debounce = function (func, threshold, execAsap) {

		var timeout;

		return function debounced () {

			var obj = this, args = arguments;
			function delayed () {
				if (!execAsap)
					func.apply(obj, args);
				timeout = null;
			};

			if (timeout)
				clearTimeout(timeout);
			else if (execAsap)
				func.apply(obj, args);

			timeout = setTimeout(delayed, threshold || 150);

		};
	}

	jQuery.fn[sr] = function(fn){  return fn ? this.bind('resize', debounce(fn)) : this.trigger(sr); };

})(jQuery,'smartresize');

/*------------------------------------------------------------------
	TAPPY
	https://github.com/filamentgroup/tappy

	! Tappy! - a lightweight normalized tap event. Copyright 2013 @scottjehl, Filament Group, Inc. Licensed MIT

-------------------------------------------------------------------*/

(function( w, $, undefined ){

	// handling flag is true when an event sequence is in progress (thx androood)
	w.tapHandling = false;

	var tap = function( $els ){
		return $els.each(function(){

			var $el = $( this ),
				resetTimer,
				startY,
				startX,
				cancel,
				scrollTolerance = 10;

			function trigger( e ){
				$( e.target ).trigger( "tap", [ e, $( e.target ).attr( "href" ) ] );
				e.stopImmediatePropagation();
			}

			function getCoords( e ){
				var ev = e.originalEvent || e,
					touches = ev.touches || ev.targetTouches;

				if( touches ){
					return [ touches[ 0 ].pageX, touches[ 0 ].pageY ];
				}
				else {
					return null;
				}
			}

			function start( e ){
				if( e.touches && e.touches.length > 1 || e.targetTouches && e.targetTouches.length > 1 ){
					return false;
				}

				var coords = getCoords( e );
				startX = coords[ 0 ];
				startY = coords[ 1 ];
			}

			// any touchscroll that results in > tolerance should cancel the tap
			function move( e ){
				if( !cancel ){
					var coords = getCoords( e );
					if( coords && ( Math.abs( startY - coords[ 1 ] ) > scrollTolerance || Math.abs( startX - coords[ 0 ] ) > scrollTolerance ) ){
						cancel = true;
					}
				}
			}

			function end( e ){
				clearTimeout( resetTimer );
				resetTimer = setTimeout( function(){
					w.tapHandling = false;
					cancel = false;
				}, 1000 );

				if( e.ctrlKey || e.metaKey ){
					return;
				}

				e.preventDefault();

				// this part prevents a double callback from touch and mouse on the same tap

				// if a scroll happened between touchstart and touchend
				if( cancel || w.tapHandling && w.tapHandling !== e.type ){
					cancel = false;
					return;
				}

				w.tapHandling = e.type;
				trigger( e );
			}

			$el
				.bind( "touchstart MSPointerDown", start )
				.bind( "touchmove MSPointerMove", move )
				.bind( "touchend MSPointerUp", end )
				.bind( "click", end );
		});
	};

	// use special events api
	if( $.event && $.event.special ){
		$.event.special.tap = {
			add: function( handleObj ) {
				tap( $( this ), true );
			},
			remove: function( handleObj ) {
				tap( $( this ), false );
			}
		};
	}
	else{
		// monkeybind
		var oldBind = $.fn.bind;
		$.fn.bind = function( evt ){
			if( /(^| )tap( |$)/.test( evt ) ){
				tap( this );
			}
			return oldBind.apply( this, arguments );
		};
	}

}( this, jQuery ));

/*------------------------------------------------------------------
	APPEND AROUND
	https://github.com/filamentgroup/AppendAround

	appendAround markup pattern. [c]2012, @scottjehl, Filament Group, Inc. MIT/GPL
	how-to:
		1. Insert potential element containers throughout the DOM
		2. give each container a data-set attribute with a value that matches all other containers' values
		3. Place your appendAround content in one of the potential containers
		4. Call appendAround() on that element when the DOM is ready

-------------------------------------------------------------------*/

(function( $ ){
	$.fn.appendAround = function(){
	  return this.each(function(){

		var $self = $( this ),
			att = "data-set",
			$parent = $self.parent(),
			parent = $parent[ 0 ],
			attval = $parent.attr( att ),
			$set = $( "["+ att +"='" + attval + "']" );

		function isHidden( elem ){
			return $(elem).css( "display" ) === "none";
		}

		function appendToVisibleContainer(){
			if( isHidden( parent ) ){
				var found = 0;
				$set.each(function(){
					if( !isHidden( this ) && !found ){
						$self.appendTo( this );
						found++;
						parent = this;
					}
				});
			}
		}

		appendToVisibleContainer();

		$(window).bind( "resize", appendToVisibleContainer );

	  });
	};
}( jQuery ));


/* **********************************************
     Begin _ui.js
********************************************** */

/*------------------------------------------------------------------
	USER INTERFACE COMPONENTS
-------------------------------------------------------------------*/

(function() {

	var $w = $(window),
		sw = document.documentElement.clientWidth,
		sh = document.documentElement.clientHeight,
		navBreak = 1024,
		setupHeaderCount = 0;

		return uiFunctions = {

			site: {

				setFooterYear: function() {
					var year = new Date().getFullYear();
					$('#footer__year').text(year);
				},

				unsetColumnHeight: function(selectorArray) {

					$(document).ready(function() {

						var selectors = new Array();

						$.each(selectorArray, function(index, value){
							selectors.push($(value));
						});

						$.each(selectors, function() {
							$(this).css('height', '');
						});

					});

				},

				setColumnHeight: function(selectorArray) {

					$(document).ready(function() {

						var selectors = new Array(),
							currentTallest = 0,
							currentRowStart = 0,
							rowDivs = new Array(),
							$el,
							topPosition = 0;

						$.each(selectorArray, function(index, value){
							selectors.push($(value));
						});

						function setHeights() {

							$.each(selectors, function() {

								$el = $(this);
								topPostion = $el.position().top;

								if (currentRowStart != topPostion) {

									for (currentDiv = 0 ; currentDiv < rowDivs.length ; currentDiv++) {
										rowDivs[currentDiv].height(currentTallest);
									}

									rowDivs.length = 0;
									currentRowStart = topPostion;
									currentTallest = $el.height();
									rowDivs.push($el);

								} else {
									rowDivs.push($el);
									currentTallest = (currentTallest < $el.height()) ? ($el.height()) : (currentTallest);
								}

								for (currentDiv = 0 ; currentDiv < rowDivs.length ; currentDiv++) {
									rowDivs[currentDiv].height(currentTallest);
								}

							});
						}

						setHeights();

					});

				},

				setupSearchMenu: function() {

					$(document).ready(function() {

						$('.header__search-btn').on('click tap', function(e) {
							$(this).toggleClass('search-open');
							e.preventDefault();
						});

						// Search form for full header view
						$('.header-container:not(.header--clone) .header__search-btn').on('click tap', function(e) {
							$('.header-container:not(.header--clone) .header__search').toggleClass('expanded');
						});

						// Search form for condensed (fixed) header view
						$('.header-container.header--clone .header__search-btn').on('click tap', function(e) {
							$('.header-container.header--clone .header__search').toggleClass('expanded');
						});

						$('.mobile-menu .mobile__search-btn').on('click tap', function(e) {
							$(this).toggleClass('active');
							$('.mobile-menu .header__search').toggleClass('expanded');
							// $('.mobile-menu .header__search__input').focus();
							e.preventDefault();
						});

					});

				},

				setupScrollToLinks: function() {

					$('.scrollto').on('click tap', function(e) {
						var targetElement = $('#' + $(this).attr('href').substring(1));
						if (targetElement.length >= 1) {
							var target = targetElement.offset().top - 55,
								scrollSpeed = function() { return Math.ceil( Math.abs( target - $w.scrollTop() ) / 1.5 ); };
							$('html, body').animate({
								scrollTop: target
							}, scrollSpeed() );
						}
						e.preventDefault();
					});

				},

				setHeaderWaypoint: function() {

					if (sw > navBreak) {
						$('body').waypoint(function(direction){
							if ( direction === 'down' ) {
								$('#header').addClass('header-collapsed');
							}
							else if ( direction === 'up' ){
								$('#header').removeClass('header-collapsed');
							}
						}, { offset: -215 } );
					}

				},

				bindScrollToTop: function() {

					$(document).ready(function() {
						$('.primary-nav__scroll-top').on('click', function(e){
							$('html, body').animate({
								scrollTop: 0
							}, 1250);
							e.preventDefault();
						});
					});

				},

				setupSecondaryNav: function() {

					/*------------------------------------------------------------------
						Toggle widget
						https://github.com/filamentgroup/toggle
						Copyright (c) 2013 Filament Group, Inc.
						Licensed under the MIT, GPL licenses.
					 ------------------------------------------------------------------*/

					;(function ($, window, document, undefined) {

						// Defaults
						var pluginName = "collapsible";
						// overrideable defaults
						var defaults = {
							pluginClass: pluginName,
							collapsedClass: pluginName + "-collapsed",
							headerClass: pluginName + "-header",
							contentClass: pluginName + "-content",
							instructions: "Interact to toggle content",
							collapsed: true
						};

						// plugin constructor
						function Plugin(element, options) {
							this.element = $( element );
							var self = this,
								dataOptions = {};

							// Allow data-attr option setting
							if( this.element.is( "[data-config]" ) ){
								$.each( defaults, function( option ) {

									var value = self.element.attr( "data-" + option.replace( /[A-Z]/g, function( c ) {
													return "-" + c.toLowerCase();
												}));

									if ( value !== undefined ) {
										if( value === "true" || value === "false" ){
											dataOptions[ option ] = value === "true";
										}
										else {
											dataOptions[ option ] = value;
										}
									}
								});
							}

							this.options = $.extend( {}, defaults, dataOptions, options );
							this._defaults = defaults;
							this._name = pluginName;
							this.init();
						}

						Plugin.prototype = {
							init: function () {
								this.header = this.element.children().eq( 0 );
								this.content = this.header.next();
								this._addAttributes();
								this._bindEvents();
							},

							_addAttributes: function(){
								this.element.addClass( this.options.pluginClass );
								this.header.addClass( this.options.headerClass );
								this.header.attr( "title", this.options.instructions );
								this.header.attr( "role", "button" );
								this.header.attr( "aria-expanded", "true" );
								this.header.attr( "tabindex", "0" );
								this.content.addClass( this.options.contentClass );
							},

							_bindEvents: function(){
								var self = this;
								this.element
									.on( "expand", this.expand )
									.on( "collapse", this.collapse )
									.on( "toggle", this.toggle );
								this.header
									.on( "mouseup", function(){
										self.element.trigger( "toggle" );
									})
									.on( "keyup", function( e ){
										if( e.which === 13 || e.which === 32 ){
											self.element.trigger( "toggle" );
										}
									});
								if( this.options.collapsed ){
									this.collapse();
								}
							},

							collapsed: false,

							expand: function () {
								var self = $.data( this, "plugin_" + pluginName ) || this;
								self.element.removeClass( self.options.collapsedClass );
								self.collapsed = false;
								self.header.attr( "aria-expanded", "true" );
							},
							collapse: function() {
								var self = $.data( this, "plugin_" + pluginName ) || this;
								self.element.addClass( self.options.collapsedClass );
								self.collapsed = true;
								self.header.attr( "aria-expanded", "false" );
							},
							toggle: function(){
								var self = $.data( this, "plugin_" + pluginName );
								self.element.trigger( self.collapsed ? "expand" : "collapse" );
							}
						};

						// lightweight plugin wrapper around the constructor,
						// preventing against multiple instantiations
						$.fn[ pluginName ] = function (options) {
							return this.each(function () {
								if ( !$.data( this, "plugin_" + pluginName ) ) {
									$.data( this, "plugin_" + pluginName, new Plugin( this, options ));
								}
							});
						};

						// Simple auto-init by selector that runs when the dom is ready. Use if desirable.
						$(function(){
							$( "." + pluginName )[ pluginName ]();
						});

					})(jQuery, window, document);

				},

				bindLoginPageControls: function() {

					$('#login__current-user__btn, #login__create-acct__btn').on('click tap', function(e) {
						$(this).hide().next('form').fadeIn();
						e.preventDefault();
					});

				},

				setupMobileNavigation: function() {
					if (sw <= navBreak) {
						$('#header').addClass('header-collapsed');
						$('#header__primary-nav').mmenu(
							{
								position: 'right',
								slidingSubmenus: true
							},
							{
								labelClass: "label",
								clone: true
							}
						);
					}
					else if (sw > navBreak) {
						// Code to go back to desktop navigation
						$('#header').removeClass('header-collapsed');
					}
				}

			},

			init: function() {

				document.addEventListener("touchstart", function(){}, true);

				uiFunctions.site.setupMobileNavigation();
				uiFunctions.site.setHeaderWaypoint();

				$('.product-details').appendAround();
				$('.related-recipes').appendAround();

				$w.resize(function() {
					sw = document.documentElement.clientWidth;
					sh = document.documentElement.clientHeight;
					uiFunctions.site.setupMobileNavigation();
					uiFunctions.site.setHeaderWaypoint();
				});

			}

		}

})();

/* **********************************************
     Begin _init.js
********************************************** */

/*------------------------------------------------------------------
    INITIALIZERS: UI components
-------------------------------------------------------------------*/

uiFunctions.init();

var functionCheck = jRespond([
		{
			label: 'med-lrg',
			enter: 648,
			exit: 10000
		},
		{
			label: 'handheld',
			enter: 0,
			exit: 648
		}
	]);

	functionCheck.addFunc({
		breakpoint: '*',
		enter: function() {
			uiFunctions.site.setFooterYear();
			uiFunctions.site.bindLoginPageControls();
			uiFunctions.site.setupScrollToLinks();

			$('#cart-table').stacktable();

			var mantleSlider = $('.bxslider').bxSlider({
				adaptiveHeight: true,
				slideWidth: 1200,
				onSliderLoad: function(currentSlide, currentIndex) {
					$(currentSlide).addClass('active');
				},
				onSlideNext: function($slideElement, oldIndex, newIndex) {
					$slideElement.addClass('active').siblings().removeClass('active');
				},
				onSlidePrev: function($slideElement, oldIndex, newIndex) {
					$slideElement.addClass('active').siblings().removeClass('active');
				}
			});

		}
	});

	functionCheck.addFunc({
		breakpoint: 'handheld',
		enter: function() {
			uiFunctions.site.setupSecondaryNav();
		}
	});

	functionCheck.addFunc({
		breakpoint: 'lrg',
		enter: function() {
			console.log('enter lrg');
			if ( $('body').hasClass('index') ) {
			}
		},
		exit: function() {
			console.log('exit lrg');
			if ( $('body').hasClass('index') ) {
			}
		}
	});

	functionCheck.addFunc({
		breakpoint: 'med-lrg',
		enter: function() {

			console.log('enter med lrg');

			if ( $('body').hasClass('index') ) {
				uiFunctions.site.setColumnHeight(['.featured-recipes__grid ul li']);
				uiFunctions.site.setColumnHeight(['.featured-products__grid li']);
			}
			if ( $('body').hasClass('product-single') ) {
				uiFunctions.site.setColumnHeight(['.related-products__grid ul li']);
			}
			if ( $('body').hasClass('page__recipes__category') ) {
				uiFunctions.site.setColumnHeight(['.recipes__category__list li']);
			}
			if ( $('body').hasClass('page__shop') ||  $('body').hasClass('page__shop-option02') ) {
				uiFunctions.site.setColumnHeight(['.shop-products__grid li']);
			}

		},

		exit: function() {

			console.log('exit med lrg');

			if ( $('body').hasClass('index') ) {
				uiFunctions.site.unsetColumnHeight(['.featured-recipes__grid ul li']);
				uiFunctions.site.unsetColumnHeight(['.featured-products__grid li']);
			}
			if ( $('body').hasClass('product-single') ) {
				uiFunctions.site.unsetColumnHeight(['.related-products__grid ul li']);
			}
			if ( $('body').hasClass('page__shop') ) {
				uiFunctions.site.unsetColumnHeight(['.shop-products__grid li']);
			}

		}
	});